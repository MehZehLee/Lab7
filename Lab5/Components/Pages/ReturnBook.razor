@page "/return-book"
@rendermode InteractiveServer
@inject Lab5.Services.ILibraryService LibraryService

<h3>Return a Book</h3>

<div>
    <label for="userId">Select User:</label>
    <select id="userId" @onchange="OnUserSelectionChanged">
        <option value="">-- Select User --</option>
        @foreach (var user in UsersWithBorrowedBooks)
        {
            <option value="@user.Id">@user.Name (ID: @user.Id)</option>
        }
    </select>
</div>

@if (BorrowedBooksForSelectedUser.Any())
{
    <h4>Borrowed Books</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Book ID</th>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in BorrowedBooksForSelectedUser)
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.ISBN</td>
                    <td><button @onclick="() => ReturnBooks(book)">Return</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@code {
    private int SelectedUserId { get; set; }
    private string Message;

    private List<User> UsersWithBorrowedBooks = new List<User>();
    private List<Book> BorrowedBooksForSelectedUser = new List<Book>();

    protected override void OnInitialized()
    {
        // Load users who have borrowed books
        UsersWithBorrowedBooks = LibraryService.GetBorrowedBooks()
            .Where(entry => entry.Value.Any())
            .Select(entry => entry.Key)
            .ToList();
    }

    private void OnUserSelectionChanged(ChangeEventArgs args)
    {
        // Update the SelectedUserId with the value selected
        SelectedUserId = int.Parse(args.Value?.ToString() ?? "0");

        if (SelectedUserId != 0)
        {
            // Update the list of books borrowed by the selected user
            BorrowedBooksForSelectedUser = LibraryService.GetBorrowedBooks()
                .FirstOrDefault(entry => entry.Key.Id == SelectedUserId).Value ?? new List<Book>();
        }
        else
        {
            BorrowedBooksForSelectedUser.Clear();
        }
    }

    private async Task ReturnBooks(Book book)
    {
        if (SelectedUserId != 0 && book != null)
        {
            try
            {
                // Remove the book from the borrowed books list
                LibraryService.ReturnBook(book.Id, SelectedUserId);

                // Re-add the book back to the available books list without changing its ID
                LibraryService.AddBookWithoutChangingId(book);

                // Provide feedback
                Message = "Book returned and re-added to available books successfully!";

                // Refresh the borrowed books list for the user
                OnUserSelectionChanged(new ChangeEventArgs { Value = SelectedUserId.ToString() });
            }
            catch (Exception ex)
            {
                Message = $"An error occurred: {ex.Message}";
            }
        }
        else
        {
            Message = "Please select a valid user and book to return.";
        }
    }
}
