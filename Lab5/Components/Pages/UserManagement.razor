@page "/user-management"
@rendermode InteractiveServer
@inject Lab5.Services.ILibraryService LibraryService

<h3>User Management</h3>

<h4>@(editMode ? "Edit User" : "Add New User")</h4>

<EditForm Model="@newUser" OnValidSubmit="@(editMode ? SaveUser : AddUser)" FormName="userForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="userName">Name</label>
        <InputText id="userName" class="form-control" @bind-Value="newUser.Name" />
    </div>

    <div class="form-group">
        <label for="userEmail">Email</label>
        <InputText id="userEmail" class="form-control" @bind-Value="newUser.Email" />
    </div>

    <input type="hidden" @bind="newUser.Id" />

    <button type="submit" class="btn btn-primary">
        @(editMode ? "Save Changes" : "Add User")
    </button>
</EditForm>

@if (users == null || !users.Any())
{
    <p>No users available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Email</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>
                        <button @onclick="() => EditUser(user)" class="btn btn-warning">Edit</button>
                    </td>
                    <td>
                        <button @onclick="() => DeleteUser(user.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User> users;
    private User newUser = new User();
    private bool editMode = false;

    protected override void OnInitialized()
    {
        // Load users from the LibraryService
        users = LibraryService.GetUsers();
    }

    private void AddUser()
    {
        // Debugging - Check if the newUser object has values
        Console.WriteLine($"New User Name: {newUser.Name}, Email: {newUser.Email}");

        // Ensure that Name and Email are not empty
        if (string.IsNullOrWhiteSpace(newUser.Name) || string.IsNullOrWhiteSpace(newUser.Email))
        {
            Console.WriteLine("User Name or Email is empty.");
            return; // Don't add user if data is invalid
        }

        // Add the new user through the LibraryService
        LibraryService.AddUser(newUser);

        // Reload the user list after adding the new user
        users = LibraryService.GetUsers();

        // Reset the form fields
        newUser = new User();
    }

    private void EditUser(User user)
    {
        // Set the form to edit mode and pre-fill the form with the user data
        newUser = new User
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email
            };
        editMode = true;
    }

    private void SaveUser()
    {
        // Ensure that Name and Email are not empty
        if (string.IsNullOrWhiteSpace(newUser.Name) || string.IsNullOrWhiteSpace(newUser.Email))
        {
            Console.WriteLine("User Name or Email is empty.");
            return;
        }

        // Update the user in the LibraryService
        LibraryService.EditUser(newUser);

        // Reload the user list after updating the user
        users = LibraryService.GetUsers();

        // Reset the form fields and exit edit mode
        newUser = new User();
        editMode = false;
    }

    private void DeleteUser(int userId)
    {
        // Delete the user in the LibraryService
        LibraryService.DeleteUser(userId);

        // Reload the user list after deleting the user
        users = LibraryService.GetUsers();
    }
}
