@page "/book-management"
@rendermode InteractiveServer
@inject Lab5.Services.ILibraryService LibraryService

<h3>Book Management</h3>

<h4>@(editMode ? "Edit Book" : "Add New Book")</h4>

<EditForm Model="@newBook" OnValidSubmit="@(editMode ? SaveBook : AddBook)" FormName="bookForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="bookTitle">Title</label>
        <InputText id="bookTitle" class="form-control" @bind-Value="newBook.Title" />
    </div>

    <div class="form-group">
        <label for="bookAuthor">Author</label>
        <InputText id="bookAuthor" class="form-control" @bind-Value="newBook.Author" />
    </div>

    <div class="form-group">
        <label for="bookISBN">ISBN</label>
        <InputText id="bookISBN" class="form-control" @bind-Value="newBook.ISBN" />
    </div>

    <input type="hidden" @bind="newBook.Id" />

    <button type="submit" class="btn btn-primary">
        @(editMode ? "Save Changes" : "Add Book")
    </button>
</EditForm>

@if (books == null || !books.Any())
{
    <p>No books available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.ISBN</td>
                    <td>
                        <button @onclick="() => EditBook(book)" class="btn btn-warning">Edit</button>
                    </td>
                    <td>
                        <button @onclick="() => DeleteBook(book.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book> books;
    private Book newBook = new Book();
    private bool editMode = false;

    protected override void OnInitialized()
    {
        // Load books from the LibraryService
        books = LibraryService.GetAvailableBooks();
    }

    private void AddBook()
    {
        // Debugging - Check if the newBook object has values
        Console.WriteLine($"New Book Title: {newBook.Title}, Author: {newBook.Author}, ISBN: {newBook.ISBN}");

        // Ensure that Title, Author, and ISBN are not empty
        if (string.IsNullOrWhiteSpace(newBook.Title) || string.IsNullOrWhiteSpace(newBook.Author) || string.IsNullOrWhiteSpace(newBook.ISBN))
        {
            Console.WriteLine("Book Title, Author, or ISBN is empty.");
            return; // Don't add book if data is invalid
        }

        // Add the new book through the LibraryService
        LibraryService.AddBook(newBook);

        // Reload the book list after adding the new book
        books = LibraryService.GetAvailableBooks();

        // Reset the form fields
        newBook = new Book();
    }

    private void EditBook(Book book)
    {
        // Set the form to edit mode and pre-fill the form with the book data
        newBook = new Book
            {
                Id = book.Id,
                Title = book.Title,
                Author = book.Author,
                ISBN = book.ISBN
            };
        editMode = true;
    }

    private void SaveBook()
    {
        // Ensure that Title, Author, and ISBN are not empty
        if (string.IsNullOrWhiteSpace(newBook.Title) || string.IsNullOrWhiteSpace(newBook.Author) || string.IsNullOrWhiteSpace(newBook.ISBN))
        {
            Console.WriteLine("Book Title, Author, or ISBN is empty.");
            return;
        }

        // Update the book in the LibraryService
        LibraryService.EditBook(newBook);

        // Reload the book list after updating the book
        books = LibraryService.GetAvailableBooks();

        // Reset the form fields and exit edit mode
        newBook = new Book();
        editMode = false;
    }

    private void DeleteBook(int bookId)
    {
        // Delete the book in the LibraryService
        LibraryService.DeleteBook(bookId);

        // Reload the book list after deleting the book
        books = LibraryService.GetAvailableBooks();
    }
}
